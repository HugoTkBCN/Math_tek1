#!/usr/bin/env python3

import sys
import math
import time

def is_num(num):
    for i in range (0, len(num)):
        if ((num[i] < '0' or num[i] > '9')):
            return False
    return True

def prompt(nb1, nb2, n, option) :
    if (option == 1) :
        print("Midpoint:")
    elif (option == 2) :
        print("Trapezoidal:")
    elif (option == 3) :
        print("Simpson:")
    print("I%.0f = %.10f\ndiff = %.10f" % (n, nb1, abs(nb2)))

def produit(n, x) :
    res = float(1)
    k = float(0)
    while (k <= n) :
        if (x != 0) :
            res = res * (math.sin(x / (2 * k + 1)) / (x / (2 * k + 1)))
        k = k + 1
    return (res)

def midpoint(n) :
    b = 5000
    i = 0
    a = 0
    h = float(b / 10000)
    result = float(0)
    while (i < 10000) :
        result += (h * produit(n, a + h / 2))
        i += 1
        a += h
    prompt(result, result - (math.pi / 2), n, 1)


def trapezoidal(n) :
    a = float(0)
    b = float(5000)
    i = float(1)
    h = float((b - a) / 10000)
    result = float(0)
    while (i < 10000) :
        result += produit(n, (a + i * h))
        i = i + 1
    result = ((result * 2) + produit(n, a) + produit(n, b)) * ((b - a) / 20000)
    prompt(result, result - (math.pi / 2), n, 2)

def simpson(n) :
    a = 0
    b = 5000
    i = a
    h = (b - a) / 10000
    result = float(0)
    res = float(0)
    final = float(0)
    while (i < 10000) :
        result += produit(n, (a + i * h) + (h / 2))
        i += 1
    i = 1
    while (i < 10000) :
            res += produit(n, (a + i * h))
            i += 1
    final = ((result * 4) + (res * 2) + produit(n, a) + produit(n, b)) * ((b - a) / 60000)
    prompt(final, final - (math.pi / 2), n, 3)

def help():
    print("USAGE\n"
    "    ./110borwein n\n"
    "\n"
    "DESCRIPTION\n"
    "    n   constant defining the integral to be computed")
    exit(0)

def check_error():
    if "-h" in sys.argv or "--help" in sys.argv:
        help()
        exit(0)
    if len(sys.argv) != 2:
        print("Invalid number of arguments. Use ./110borwein -h or ./110borwein --help")
        exit(84)
    if (not is_num(sys.argv[1]) or int(sys.argv[1]) < 0):
        print("Invalid argument.")
        exit(84)

check_error()
n = float(sys.argv[1])
midpoint(n)
print("")
trapezoidal(n)
print("")
simpson(n)
