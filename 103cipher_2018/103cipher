#!/usr/bin/env python3

from math import *
import sys

def get_list(string) :
    number = {}
    index = 0
    for char in string:
        number[index] = ord(char)
        index += 1
    return number

def encrypt3x3(message, key) :
    message_ascii = get_list(message)
    lenght = len(message_ascii) - 2
    key_ascii = get_list(key)
    if len(key_ascii) < 9 :
        for i in range (len(key_ascii), 9) :
            key_ascii[i] = 0
    print("Key matrix:")
    for i in range (0, len(key_ascii)):
        print(key_ascii[i], end="")
        if (i + 1) % 3 != 0 :
            print("\t", end="")
        else :
            print("\n", end="")
    print("\n", end="")
    index = 0
    rank = 0
    res1 = {}
    res2 = {}
    res3 = {}
    for index in range (0, lenght) :
        res1[rank] = key_ascii[0] * message_ascii[index] + key_ascii[3] * message_ascii[index + 1] + key_ascii[6] * message_ascii[index + 2]
        res2[rank] = key_ascii[1] * message_ascii[index] + key_ascii[4] * message_ascii[index + 1] + key_ascii[7] * message_ascii[index + 2]
        res3[rank] = key_ascii[2] * message_ascii[index] + key_ascii[5] * message_ascii[index + 1] + key_ascii[8] * message_ascii[index + 2]
        index += 2
        rank += 1
    print("Encrypted message:")
    for i in range (0, rank):
        print(str(res1[i]) + " " + str(res2[i]) + " " + str(res3[i]), end="")
        if i < rank - 1 :
            print(" ", end = "");
    print("\n", end="")

def encrypt2x2(message, key) :
    message_ascii = get_list(message)
    lenght = len(message_ascii) - 1
    key_ascii = get_list(key)
    if len(key_ascii) < 4 :
        for i in range (len(key_ascii), 4) :
            key_ascii[i] = 0
    print("Key matrix:")
    for i in range (0, len(key_ascii)):
        print(key_ascii[i], end="")
        if i % 2 == 0 :
            print("\t", end="")
        else :
            print("\n", end="")
    print("\n", end="")
    index = 0
    rank = 0
    res1 = {}
    res2 = {}
    for index in range (0, lenght) :
        res1[rank] = key_ascii[0] * message_ascii[index] + key_ascii[2] * message_ascii[index + 1]
        res2[rank] = key_ascii[1] * message_ascii[index] + key_ascii[3] * message_ascii[index + 1]
        index += 1
        rank += 1
    print("Encrypted message:")
    for i in range (0, rank):
        print(str(res1[i]) + " " + str(res2[i]), end="")
        if i < rank - 1 :
            print(" ", end = "");
    print("\n", end="")

def verif_arg() :
    if len(sys.argv) <= 1 :
        exit(84)
    if sys.argv[1] == "-h" :
        print("USAGE")
        print("    ./103cipher message key flag\n")
        print("DESCRIPTION")
        print("    message    a message, made of ASCII characters")
        print("    key        the encryption key, made of ASCII characters")
        print("    flag       0 for the message to be encrypted, 1 to be decrypted")
    if len(sys.argv) != 4 :
        exit(84)

def encrypt1x1(message, key) :
    message_ascii = get_list(message)
    lenght = len(message_ascii)
    key_ascii = get_list(key)
    print("Key matrix:")
    print(key_ascii[0])
    index = 0
    rank = 0
    res1 = {}
    for index in range (0, lenght) :
        res1[rank] = key_ascii[0] * message_ascii[index]
        rank += 1
    print("Encrypted message:")
    for i in range (0, rank):
        print(str(res1[i]), end="")
        if i < rank - 1 :
            print(" ", end = "");
    print("\n", end="")
        
def main() :
    verif_arg()
    message = sys.argv[1]
    key = sys.argv[2]
    flag = int(sys.argv[3])
    if flag == 0:
        if len(key) == 1 :
            encrypt1x1(message, key)
        elif len(key) <= 4 :
            encrypt2x2(message, key)
        elif len(key) > 4 and len(key) <= 9 :
            encrypt3x3(message, key)
        else :
            print("Key should be squared")
            exit(84)


if __name__ == '__main__':
    main()
